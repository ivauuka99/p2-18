Выполнил: Короленко Иван Романович
Студент: ККМТ П2-18
****************************************************************
Содержание:
1. Форматирование строк “По старинке” (оператор %)
2. Форматирование строк “По новому” (str.format)
3. Интерполяция строк / f-Строки (Python 3.6+)
4. Шаблонные строки (Стандартная библиотека Template Strings)
5. Произвольные выражения
6. Многострочные F-Strings
7. Скорость
8. ПРОИЗВОДИТЕЛЬНОСТЬ
9. Основные выводы
ЗАКЛЮЧЕНИЕ
****************************************************************

****************************************************************
Введение
Иногда (а точнее, довольно часто) возникают ситуации, когда нужно сделать строку, подставив в неё некоторые данные, полученные в процессе выполнения программы (пользовательский ввод, данные из файлов и т. д.). Подстановку данных можно сделать с помощью форматирования строк. Форматирование можно сделать с помощью оператора %, либо с помощью метода format.
****************************************************************
1. Форматирование строк “По старинке” (оператор %)
Строки в Python содержат уникальную встроенную операцию, доступ к которой можно получить через оператор %. Это позволяет заметно упростить позиционное форматирование. Если вы когда-либо работали с функцией printf в С, вы сразу узнаете, как это работает. Вот простой пример:

print('Hello, %s' % name)
Вывод: "Hello, Bob"

Я использую определитель формата %s в данном случае, чтобы сказать Python, где именно заменить значение имени, представленного в виде строки.
Существуют другие определители формата, которые позволяют вам контролировать формат выдачи. Например, возможно конвертировать числа в шестнадцатеричную нотацию или добавлять пробелы для создания хорошо отформатированных таблиц и отчетов. (См Python Docs: ““printf-style String Formatting”.)
Здесь, вы можете использовать определитель формата %x для конвертации значения int в строку и представить его в качестве шестнадцатеричного числа:

errno = 50159747054
print('%x' % errno)
Вывод: 'badc0ffee'

“По старинке”, синтаксис форматирования строки немного меняется, если вы хотите сделать несколько замен в одной строке. Так как оператор % принимает только один аргумент, вам нужно обернуть правую часть в кортеж, вот так:


errno = 50159747054
name = 'Bob'
print('Hey %s, there is a 0x%x error!' % (name, errno))
'Hey Bob, there is a 0xbadc0ffee error!'

Также возможно сослаться на заменители переменных по имени в вашей строке формата, если вы передадите сопоставление оператору %:

print(
    'Hey %(name)s, there is a 0x%(errno)x error!' % {
        "name": name, "errno": errno
    }
)
Вывод: 'Hey Bob, there is a 0xbadc0ffee error!'
****************************************************************

2. Форматирование строк “По новому” (str.format)

Python 3 предоставил новый способ форматирования, который также был внесен в раннюю версию Python 2.7. Этот “новый стиль” форматирования строк избавляется от специального синтаксиса оператора % и делает синтаксис для форматирования строк более регулярным. Теперь форматирование обрабатывается вызовом .format() в объекте строки.
Вы можете использовать format(), чтобы выполнить простое позиционное форматирование, также, как мы делали это по старинке:

print(
    'Hey {name}, there is a 0x{errno:x} error!'.format(
        name=name, errno=errno
    )
)
Вывод: 'Hey Bob, there is a 0xbadc0ffee error!'
****************************************************************

3. Интерполяция строк / f-Строки (Python 3.6+)
Python 3.6 Добавил новый подход форматирования строк под названием форматированные строчные литералы, или “f-строки”. Этот новый способ форматирования строк позволяет вам использовать встроенные выражения Python внутрь строковых констант. Вот простой, наглядный пример:

a = 5
b = 10
print(f'Five plus ten is {a + b} and not {2 * (a + b)}.')
# Вывод: 'Five plus ten is 15 and not 30.'

Как вы видите, это добавляет префикс к константе строки с буквой “f” — следовательно, названием становится “f-strings”. Этот новый синтаксис форматирования — очень мощный. Так как вы можете вставлять произвольные выражения Python, вы можете даже проводить встроенную арифметику. Посмотрим на пример:
****************************************************************

4. Шаблонные строки (Стандартная библиотека Template Strings)
Рассмотрим еще один инструмент для форматирования строк в Python: template strings. Это более простой и менее мощный механизм, но в ряде случаев он может быть именно тем, что вам нужно.

Давайте посмотрим на простой пример:

from string import Template
t = Template('Hey, $name!')
print(t.substitute(name=name))
# Вывод: 'Hey, Bob!'

Вы видите, что нам нужно импортировать класс Template из встроенного модуля Python, под названием string. Эти шаблонные строки не являются особенностью корневого языка, но они поддерживаются модулем string в стандартной библиотеке.
****************************************************************

5. Произвольные выражения
Так как f-строки оцениваются по мере выражения, вы можете внести любую или все доступные выражения Python в них. Это позволит вам делать интересные вещи, например следующее:

print(f"{2 * 37}")
# Вывод: '74'

Вы даже можете использовать объекты, созданные из классов при помощи f-строки. Представим, что у вас есть следующий класс:

class Comedian:
    def __init__(self, first_name, last_name, age):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
 
    def __str__(self):
        return f"{self.first_name} {self.last_name} is {self.age}."
 
    def __repr__(self):
        return f"{self.first_name} {self.last_name} is {self.age}. Surprise!"
****************************************************************

6. Многострочные F-Strings
У вас могут быть многострочные f-strings:
name = "Eric"
profession = "comedian"
affiliation = "Monty Python"
 
message = (
    f"Hi {name}. "
    f"You are a {profession}. "
    f"You were in {affiliation}."
)
 
print(message)
# Вывод: 'Hi Eric. You are a comedian. You were in Monty Python.'
****************************************************************

7. Скорость
Буква f в f-strings может также означать и “fast”. Наши f-строки заметно быстрее чем % и str.format() форматирования. Как мы уже видели, f-строки являются выражениями, которые оцениваются по мере выполнения, а не постоянные значения. Вот выдержка из документации:

“F-Строки предоставляют способ встраивания выражений внутри строковых литералов с минимальным синтаксисом. Стоит обратить внимание на то, что f-строка является выражением, которое оценивается по мере выполнения, а не постоянным значением. В исходном коде Python f-строки является литеральной строкой с префиксом f, которая содержит выражения внутри скобок. Выражения заменяются их значением.”

Во время выполнения, выражение внутри фигурных скобок оценивается в собственной области видимости Python и затем сопоставляется со строковой литеральной частью f-строки. После этого возвращается итоговая строка. В целом, это все.
Рассмотрим сравнение скорости:

timeit.timeit("""name = "Eric"
... age = 74
... f'{name} is {age}.'""", number = 10000)
****************************************************************

8. ПРОИЗВОДИТЕЛЬНОСТЬ
F-строки не только гибкие, но и быстрые. 
На простых примерах f-строки показывают самые лучшие результаты.
На сложных шаблонах f-строки ведут себя также как %-форматирование
(разница в пользу %-форматирования не превышает величину погрешности).
А вот относительно метода format() f-строки быстрее на 27%.
****************************************************************

9. Основные выводы
• Существует несколько способов форматирования строк в python.
• Каждый метод имеет свои индивидуальные плюсы и минусы. Ваш вариант использования будет влиять на то, какой метод вы должны использовать.
• Если вы не можете решить, какой метод форматирования строк использовать, попробуйте приведенное выше правило форматирования строк.
****************************************************************

****************************************************************
ЗАКЛЮЧЕНИЕ
Если вы используете Python 3.6 и старше, то самое время использовать f-строки — они гибкие и быстрые.
Это может быть удивительным, но существует более одного способа обработки форматирования строк в Python. Каждый метод имеет свои индивидуальные преимущества и недостатки. Использования того или иного метода форматирования строк зависит исключительно от вашей цели применения.
****************************************************************
